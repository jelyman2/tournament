{"name":"Tournament","tagline":"A Python application to simulate 1-on-1 matchups and rank each player by the number of wins and other data.","body":"# Tournament \r\n[![Build Status](https://travis-ci.org/jelyman2/tournament.svg?branch=master)](https://travis-ci.org/jelyman2/tournament)\r\n\r\nA Python application to simulate 1-on-1 matchups and rank each player by the \r\nnumber of wins and other data.\r\n\r\n## Overview\r\n\r\nThe purpose of this application is to demonstrate basic interaction with a \r\nrelational database management system via Python. This was a project crafted \r\nfor the \"Full Stack Developer\" Udacity Nanodegree program in which I enrolled.\r\n\r\n## How it Works\r\n\r\nI was faced with two options: let the user run the script and have it behave \r\nin a demo-like fashion with pre-defined events OR allow the user to have \r\ndirect control over the meaty portions of the application (a.k.a. the user \r\ndatabase).\r\n\r\nRun the script on the command line with a 2.7x python interpreter with one of\r\n the following arguments. If you do not, you'll be prompted that you forgot \r\n to do so and will receive a list of arguments, anyway.\r\n\r\n### Arguments\r\n\r\nHere's a breakdown of all the arguments that can be passed by the user:\r\n\r\n#### Player\r\n\r\n`--new-player`: Creates a new player. You'll be prompted for a name and \r\ncountry of origin.\r\n\r\n`--delete-player`: Delete an existing player. You'll be prompted for an `ID`.\r\n\r\n`--edit-player`: Update the information for an existing player. You'll be \r\nprompted for an `ID`.\r\n\r\n`--list-players`: List all players in the database.\r\n\r\n`--list-ranking`: List all players in the database, sorted by number of wins.\r\n\r\n#### Match\r\n\r\n`--new-match`: Create a new match. You'll be prompted for `ID`s of two players.\r\n\r\n`--swiss-match`: Activates the swiss-style matchup function. This is an \r\nautomated behavior.\r\n\r\n#### Data\r\n\r\n`--latest-match`: Prints out the results of the latest executed match.\r\n\r\n`--lookup-match`: Allows the user to lookup a match by `ID`.\r\n\r\n### Other\r\n\r\n`--audit-log`: All cool apps come with logging capabilities. While I never \r\nseem to be quite satisfied with what's being logged, there's data being \r\nrecorded, anyway, and you can view the entries.\r\n\r\n## Noteworthy\r\n\r\n* Since player `ID` numbers are unique, an `ID` of a deleted player will never \r\nbelong to another player so in its place you'll see `[DELETED]`.\r\n\r\n* Missing data will likely always return an exception.\r\n\r\n* I opted to do some of the data manipulation in the app for the swiss \r\npairings, versus in the database query. My testing shows there was no \r\nperformance improvement using the latter.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}